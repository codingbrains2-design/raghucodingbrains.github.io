<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;

use App\Http\Requests;
use Paypalpayment;
use Session;
use Redirect;

class PaymentController extends Controller
{

	private $_apiContext;

	private $_ClientId='ATIED-FXjSO8NHXHau8ujdzdnr2RiiB2pMoGHzgXiheQi37KeLMXnZN3SS6OiGWIeYn7W5IA9NA5XogP';
	private $_ClientSecret='EEcXdHTP2c6l5V7TPhClzbQvust0oRMu5YmaVLKtv-nsVBSQgtTesnbmHWz2dVUqaug9pMHGWpJAaFoM';

	public function __construct()
	{


		$this->_apiContext = Paypalpayment::apiContext($this->_ClientId, $this->_ClientSecret);


		$this->_apiContext->setConfig(array(
			'mode' => 'sandbox',
			'http.ConnectionTimeOut' => 30,
			'log.LogEnabled' => true,
			'log.FileName' => __DIR__.'/../PayPal.log',
			'log.LogLevel' => 'FINE'
			));

	}

	public function order()
	{
		return view('payment.order');
	}

	public function store(Request $request)
	{ 
		$addr= Paypalpayment::address();
		$addr->setLine1("3909 Witmer Road");
		$addr->setLine2("Niagara Falls");
		$addr->setCity("Niagara Falls");
		$addr->setState("NY");
		$addr->setPostalCode("14305");
		$addr->setCountryCode("US");
		$addr->setPhone("716-298-1822");

		

        // ### CreditCard
		$card = Paypalpayment::creditCard();
		$card->setType("visa")
		->setNumber("4032030908162994")
		->setExpireMonth("06")
		->setExpireYear("2021")
		->setCvv2("456")
		->setFirstName($request->first_name)
		->setLastName($request->first_name);

        // ### FundingInstrument
        // A resource representing a Payer's funding instrument.
        // Use a Payer ID (A unique identifier of the payer generated
        // and provided by the facilitator. This is required when
        // creating or using a tokenized funding instrument)
        // and the `CreditCardDetails`
		$fi = Paypalpayment::fundingInstrument();
		$fi->setCreditCard($card);

        // ### Payer
        // A resource representing a Payer that funds a payment
        // Use the List of `FundingInstrument` and the Payment Method
        // as 'credit_card'
		$payer = Paypalpayment::payer();
		$payer->setPaymentMethod("PAYPAL");
		// ->setFundingInstruments(array($fi));

		$item1 = Paypalpayment::item();
		$item1->setName('Ground Coffee 40 oz')
		->setDescription('Ground Coffee 40 oz')
		->setCurrency('USD')
		->setQuantity(1)
		->setTax(0.3)
		->setPrice(7.50);

		$item2 = Paypalpayment::item();
		$item2->setName('Granola bars')
		->setDescription('Granola Bars with Peanuts')
		->setCurrency('USD')
		->setQuantity(5)
		->setTax(0.2)
		->setPrice(2);


		$itemList = Paypalpayment::itemList();
		$itemList->setItems(array($item1,$item2));


		$details = Paypalpayment::details();
		$details->setShipping("1.2")
		->setTax("1.3")
                //total of items prices
		->setSubtotal("17.5");

        //Payment Amount
		$amount = Paypalpayment::amount();
		$amount->setCurrency("USD")
                // the total is $17.8 = (16 + 0.6) * 1 ( of quantity) + 1.2 ( of Shipping).
		->setTotal("20")
		->setDetails($details);


        // ### Transaction
        // A transaction defines the contract of a
        // payment - what is the payment for and who
        // is fulfilling it. Transaction is created with
        // a `Payee` and `Amount` types

		$transaction = Paypalpayment::transaction();
		$transaction->setAmount($amount)
		->setItemList($itemList)
		->setDescription("Payment description")
		->setInvoiceNumber(uniqid());

        // ### Payment
        // A Payment Resource; create one using
        // the above types and intent as 'sale'
		$baseUrl = 'http://localhost/vrl/';

		$redirectUrls = Paypalpayment::redirectUrls();
		$redirectUrls->setReturnUrl($baseUrl.'payment/confirm');
		$redirectUrls->setCancelUrl($baseUrl.'payment/cancel');




		$payment = Paypalpayment::payment();

		$payment->setIntent("sale")
		->setPayer($payer)
		->setTransactions(array($transaction))
		->setRedirectUrls($redirectUrls);

		try {

			$payment->create($this->_apiContext);
			// $response = $payment->create($this->_apiContext);
			// $this->_paymentId = $response->id;

			//$redirectUrl = $response->links[0]->href;
			// exit;
			// return Redirect::to( $redirectUrl );


		} catch (PayPalConnectionException $e) {
			echo $e->getData();
    // Perhaps log an error
			header('Location: ../PayPall/error.php');

		}

		

  //   // add payment ID to session
		Session::put('paypal_payment_id', $payment->getId());
		
		foreach($payment->getLinks() as $link) {
			if($link->getRel() == 'approval_url') {
				$redirectUrls = $link->getHref();
				break;
			}
		}
		if(isset($redirectUrls)) {
  //       // redirect to paypal
			return Redirect::away($redirectUrls);
		}

		return Redirect::route('http://localhost/vrl/payment')
		->with('error', 'Unknown error occurred');

		// echo "<pre>"; print_r($payment);echo "</pre>";
	} 

	public function index()
	{
		echo "<pre>";

		$payments = Paypalpayment::getAll(array('count' => 1, 'start_index' => 0), $this->_apiContext);

		dd($payments);
	}

	public function show()
	{
		$payment_id = 'PAY-9G176671KN251464JK43EW6Y';
		$payment = Paypalpayment::getById($payment_id,$this->_apiContext);

		dd($payment);
	}





}
